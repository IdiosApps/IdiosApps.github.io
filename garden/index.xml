<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Digital Garden on James' Digital Garden</title><link>https://idiosapps.github.io/garden/</link><description>Recent content in Digital Garden on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark ©</copyright><lastBuildDate>Fri, 01 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idiosapps.github.io/garden/index.xml" rel="self" type="application/rss+xml"/><item><title>Ways of Working 'checklist'</title><status>seeding</status><link>https://idiosapps.github.io/garden/ways-of-working-checklist/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/ways-of-working-checklist/</guid><description>&lt;p>Every team will figure out their own unique ways of working through &amp;ldquo;Forming, Storming, Norming and Performing&amp;rdquo; - but here are some techniques that I&amp;rsquo;ve seen provide lots of value - usually with little effort!&lt;/p>
&lt;p>✏ Why not take a note of each one you aren&amp;rsquo;t using yet as you read?&lt;/p>
&lt;h1 id="github">GitHub&lt;/h1>
&lt;h2 id="pr-templates">PR Templates&lt;/h2>
&lt;p>Open source projects often have multiple PR templates, to help capture context on &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates#issue-templates">bug reports, feature requests, and security vulnerabilities.&lt;/a>&lt;/p>
&lt;p>In your team&amp;rsquo;s day-to-day repositories, it&amp;rsquo;s likely you aren&amp;rsquo;t using templates. Maybe they &amp;ldquo;get in the way&amp;rdquo; and &amp;ldquo;just get deleted&amp;rdquo;, but these two features might make it more interesting!&lt;/p>
&lt;h3 id="markdown-comments">Markdown comments&lt;/h3>
&lt;p>GitHub uses MarkDown (their own special flavour of MarkDown, really) - and it supports comments:&lt;/p>
&lt;p>&lt;code>example md comment&lt;/code>&lt;/p>
&lt;p>These comments are only visible when editing - you can&amp;rsquo;t see them on the posted description.
You can use comment to give friendly reminders on:&lt;/p>
&lt;ul>
&lt;li>Providing context&lt;/li>
&lt;li>Linking to the ticket (rather than paraphrasing all that context!)&lt;/li>
&lt;li>Ensuring tests (unit, integration, performance) are covered
&lt;ul>
&lt;li>You could give a commented-out checklist if you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="autolinks">AutoLinks&lt;/h3>
&lt;p>In each GitHub repository, you can set up &amp;ldquo;AutoLinks&amp;rdquo;. They&amp;rsquo;re basically an autogenerated, tidy hyperlink.&lt;/p>
&lt;p>The GitHub Docs give a good example - but I&amp;rsquo;ll extract a snippet and save you getting distracted:&lt;/p>
&lt;ul>
&lt;li>Reference prefix: &lt;code>JIRA-&lt;/code>&lt;/li>
&lt;li>Target URL: &lt;code>https://jira.example.com/issue?query=&amp;lt;num&amp;gt;&lt;/code>&lt;/li>
&lt;li>Preview: &lt;code>JIRA-123&lt;/code> is converted to &lt;code>https://jira.example.com/issue?query=123&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Combined with templates, you can ensure that every PR has a short link to the relevant tickets.
This is much better than just having the ticket number (and no link) in the title/description/branch/commits:&lt;/p>
&lt;ul>
&lt;li>It saves the PR author time in making these links&lt;/li>
&lt;li>It saves the reviewers time fishing around in Jira and getting distracted&lt;/li>
&lt;li>It ensures everyone has easily accessible context, so the PR description can focus on the actual changes&lt;/li>
&lt;/ul>
&lt;p>Until I knew this I was using an Espanso text expansion macro &lt;code>:JIRA&lt;/code> to do similar, but this setup gives your whole team an awesome shared capability&lt;/p>
&lt;h3 id="conventional-comments">Conventional comments&lt;/h3>
&lt;p>Stating the importance &amp;amp; intent of your message up front can make communication clearer, and decisions faster.&lt;/p>
&lt;p>Read more in detail at &lt;a href="https://conventionalcomments.org/">https://conventionalcomments.org/&lt;/a>, but basically comments on PRs can look more valuable like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>issue: this mock never gets called!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>praise: this method is really easy to read, and handles the logic very well
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>nitpick: these two tests could be combined
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the latter example to how it might be expressed without &amp;ldquo;conventional comments&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>These two tests could be combined, but it&amp;#39;s not a blocker for this PR and I&amp;#39;ll approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conventional-commits">Conventional commits&lt;/h3>
&lt;p>Commits can look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docs: add javadocs for user-facing swagger api&lt;/code>&lt;/li>
&lt;li>&lt;code>bug: fix a flaky test&lt;/code>&lt;/li>
&lt;li>&lt;code>chore: bump dependency version x-&amp;gt;y&lt;/code>&lt;/li>
&lt;li>&lt;code>feat: AI face detection when user blinks&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>It could help you have a more atomic git history, which may make PRs easier to comb through.
You can also use the prefixes to group changes, and make prettier changelogs.&lt;/p>
&lt;p>Read more: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/p>
&lt;h1 id="tickets--work-capture">Tickets / work capture&lt;/h1>
&lt;h2 id="make-templates">Make templates&lt;/h2>
&lt;ul>
&lt;li>Context, task, ACs, key contacts,&lt;/li>
&lt;li>User stories&lt;/li>
&lt;/ul>
&lt;p>Templates are all about adding context in an organised way.
Having this context gives your team more autonomy and interest in the problems, and can lead to better outcomes. Think &amp;ldquo;Context over control&amp;rdquo;&lt;/p>
&lt;h1 id="knowledge-management">Knowledge management&lt;/h1>
&lt;p>How are you recording your knowledge? Probably in a few places! It might look like this:&lt;/p>
&lt;ul>
&lt;li>Slack (short term - threads can be linked, good for captured asynchronous discussion)&lt;/li>
&lt;li>Google Docs (also great for captured async discussion, but leaning towards )&lt;/li>
&lt;li>Confluence (longer-term storage for internal decisions - awkward to collaborate on, not good for regular updates)&lt;/li>
&lt;li>Websites (static sites like Hugo&amp;rsquo;s Doks &amp;amp; Docusaurus can make information presentable, searchable, and written in simple markdown &amp;amp; managed by e.g. Git)&lt;/li>
&lt;li>Some loose markdown files in various repos (maybe some readme.md)&lt;/li>
&lt;/ul>
&lt;p>To get someone up to speed on your project, you&amp;rsquo;d probably start with the higher-level, more organised/presentable formats. Hopefully there is a natural flow through the information, otherwise someone who knows the scenery may have to plan a route for you.&lt;/p>
&lt;p>But what if there were tools that combined the strengths of these platforms. Are there any services that are:&lt;/p>
&lt;ul>
&lt;li>simple: are written in simple markdown-like language&lt;/li>
&lt;li>collaborative: many users can write in real-time&lt;/li>
&lt;li>efficient: easy to convert discussions into clean documentation&lt;/li>
&lt;li>searchable: text search, or even graph search (how do ideas and documentation naturally relate?)&lt;/li>
&lt;/ul>
&lt;h2 id="notion">Notion&lt;/h2>
&lt;p>I use Notion, which covers these points well. It&amp;rsquo;s becoming more and more popular, and I&amp;rsquo;ve seen a few companies using it.
Despite appearing simple, there&amp;rsquo;s plenty of power features under the hood:&lt;/p>
&lt;ul>
&lt;li>You can create tables of data - and create views over them, filter, sort, label and organise in helpful ways&lt;/li>
&lt;li>You can make timelines, calendars&lt;/li>
&lt;li>You can use it like a task management system (GTD, four quadrants - whatever you want)&lt;/li>
&lt;li>You can use it as a sprint/kanban board&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s powerful - even for free users.
For businesses, it&amp;rsquo;s at least $15 per user, per month. That sounds like quite a lot, but &lt;a href="https://www.atlassian.com/software/jira/pricing?&amp;amp;aceid=&amp;amp;adposition=&amp;amp;adgroup=144583507597&amp;amp;campaign=19306719987&amp;amp;creative=642044705684&amp;amp;device=c&amp;amp;keyword=jira%20cost&amp;amp;matchtype=e&amp;amp;network=g&amp;amp;placement=&amp;amp;ds_kids=p74602839944&amp;amp;ds_e=GOOGLE&amp;amp;ds_eid=700000001558501&amp;amp;ds_e1=GOOGLE&amp;amp;gclid=Cj0KCQjwr82iBhCuARIsAO0EAZwOOUXmPpGJL3jh7S3mnHU5GnfebfyTdNgpRlczLTWDG9gWD0QTlGkaAs1cEALw_wcB&amp;amp;gclsrc=aw.ds">it looks like Jira costs the same&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve never worked in a company using it as a central tool in all the ways above - so I can&amp;rsquo;t actually vouch for it. Maybe it only works up to a certain scale of organisation - but maybe that could be your organisation.&lt;/p>
&lt;h2 id="obsidian">Obsidian&lt;/h2>
&lt;p>I didn&amp;rsquo;t get far into Obsidian - the theory can get pretty deep, and there&amp;rsquo;s many methodologies. You might have heard of:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Second brain&amp;rdquo;, and&lt;/li>
&lt;li>&amp;ldquo;Zettelkasten&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>The key concept is that ideas are related, and naturally link up (like in our brain).
You can view them as a graph (looks like synapses in our brain), converge, and diverge thoughts whilst keeping them linked.
There&amp;rsquo;s also a cool plugin system. I had a play and set up cloud sync to GitHub and OneDrive. I&amp;rsquo;ve already got years of notes in Notion, and didn&amp;rsquo;t quite get sold on Obsidian.&lt;/p>
&lt;p>Arguably, the notes (and their relations!) might not be personal enough to be maximally useful for everyone. However, across a small team it could work really well. &lt;a href="https://obsidian.md/pricing">$50 per user, per year - plus about $100 a year for sync.&lt;/a>&lt;/p>
&lt;p>If you think you&amp;rsquo;re having problems in some of those areas, maybe try a different knowledge management system.
This is totally not an advert ;) I&amp;rsquo;d just love to see first-hand how these tools could work for some teams instead of the usual Jira/Confluence fare! If you have some 💲 and some ⌛, your team could spike using these tools.&lt;/p>
&lt;h1 id="discussions">Discussions&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Problem&lt;/th>
&lt;th>Solution&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rabbit holes&lt;/td>
&lt;td>Be mindful of topics dominating meetings - consider a separate meeting/thread to go into specifics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Circling&lt;/td>
&lt;td>Be mindful of discussions looping. Raise the concern, or capture notes everyone can see and help to align on a plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uncaptured discussion&lt;/td>
&lt;td>Take notes and share them. Ask for corrections, as you may have misunderstood. Whether it&amp;rsquo;s minutes for regular meetings, or details in ticket refinement - capturing 5 minutes of context now can save a few minutes in the future&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Discussion contains too many moving pieces&lt;/td>
&lt;td>Make a quick sketch, in TLDRAW or even Mermaid. Humans find it hard to remember 5-9 &amp;ldquo;bits&amp;rdquo; of info - compress ideas into a visual)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Out of office/ill teammates missed important discussion meetings&lt;/td>
&lt;td>Record the meetings, and update the calendar invite with the recording link. Transcribe the audio, provide a searchable interface to save time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Solutionising without being aligned&lt;/td>
&lt;td>Define the problem statement. &amp;ldquo;What questions are we trying to answer?&amp;rdquo;, &amp;ldquo;What data lets us answer these questions?&amp;rdquo;, &amp;ldquo;How can we get that data?&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="collaborative-working">Collaborative working&lt;/h1>
&lt;h2 id="visible-welcoming-huddles">Visible, welcoming huddles&lt;/h2>
&lt;p>Is your team pairing and mobbing, but in private calls?
It&amp;rsquo;s not transparent or welcoming - so consider this:&lt;/p>
&lt;p>Take the number of devs you have, and divide by two. Make this many &amp;ldquo;pairing&amp;rdquo; Slack channels.
It gives a space for everyone to pair, or form mobs. If someone needs help, it&amp;rsquo;s easy to hop in and out without the complexity of setting up more calls.&lt;/p>
&lt;h2 id="remote-pairing">Remote pairing&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Review&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Zoom&lt;/td>
&lt;td>Solid screenshare quality, awkward drawing tools, and confusing controls. Preferred screen-sharing platform for now&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Slack&lt;/td>
&lt;td>Worst screenshare &amp;amp; audio quality. Most convenient to drop in/out with pairing channels&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VS Code&lt;/td>
&lt;td>Shared editor &amp;amp; terminal are good - but the file explorer seems too strict to let the guest explore the project and be productive&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intellij&lt;/td>
&lt;td>Code With Me is decent now - my main issue is the Shared Terminal is completely broken for the host (a big problem if you run your tests there!)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://tuple.app/">Tuple&lt;/a>&lt;/td>
&lt;td>Great screenshare quality (configurable), good interactivity. Configuration maybe a bit too permissive, but necessary. Great features like &amp;ldquo;pebble drop&amp;rdquo; to show where you&amp;rsquo;re looking&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quality-checks">Quality checks&lt;/h1>
&lt;ul>
&lt;li>git hooks&lt;/li>
&lt;li>github actions has a broad marketplace&lt;/li>
&lt;/ul></description></item><item><title>Rota Driven Development ⁉</title><status>evergreen</status><link>https://idiosapps.github.io/garden/rota-driven-development/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/rota-driven-development/</guid><description>&lt;p>How can you take a bunch of T-shaped developers and upskill everyone to be a 🟩-shaped developer?&lt;/p>
&lt;p>You might know a few ways you can do this already:&lt;/p>
&lt;ul>
&lt;li>Knowledge sharing sessions&lt;/li>
&lt;li>Pairing/Mobbing&lt;/li>
&lt;li>Giving regular, honest feedback&lt;/li>
&lt;/ul>
&lt;p>You might know why it could be a good idea:&lt;/p>
&lt;ul>
&lt;li>Employees want to be empowered&lt;/li>
&lt;li>Learning, teaching, and broadening horizons can be rewarding &amp;amp; fun&lt;/li>
&lt;li>Reduced &amp;ldquo;bus factor&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>But what would something &lt;em>really extreme&lt;/em> look like?
Enter: &amp;ldquo;Rota Driven Development&amp;rdquo;
&lt;em>Note: You might even want to experiment with this setup if you already have pairing/mobbing as your main way of working. Otherwise, this might sound quite terrible! But let&amp;rsquo;s see how it might be valuable. This post isn&amp;rsquo;t about why pairing is good or bad - but what an extreme variant of it could look like&lt;/em>&lt;/p>
&lt;h1 id="illustrative-example">Illustrative example&lt;/h1>
&lt;p>Let&amp;rsquo;s say we have three developers:&lt;/p>
&lt;ul>
&lt;li>BackEnd expert (B), with a bit of Cyber (c) [Bc_]&lt;/li>
&lt;li>Cyber expert (C), no other experience [&lt;em>C&lt;/em>]&lt;/li>
&lt;li>FrontEnd expert (F), with a bit of BackEnd (b) [b_F]&lt;/li>
&lt;/ul>
&lt;p>When you pair these developers, they&amp;rsquo;ll level up by working on tasks together:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[Bc_] + [b_F] -&amp;gt; [Bcf] + [B_F] (let&amp;rsquo;s say the BackEnd expert didn&amp;rsquo;t share much on Cyber this time)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[B_F] + [&lt;em>C&lt;/em>] -&amp;gt; [BcF] + [bCf] (they worked across all three topics)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Already, the team is becoming much more well-rounded. Everyone has picked up at least the basics of every field.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, it&amp;rsquo;s an extreme example. More realistically, there could be many domains (framework, syntax, literally domain knowledge, etc.) within any of these three fields - so it can still make sense for e.g. BackEnd developers only.&lt;/p>
&lt;p>In a real team, there would probably be a few more people as well - so everyone can Always Be Transferring Knowledge&lt;/p>
&lt;h1 id="your-teams-skill-matrix">Your team&amp;rsquo;s &amp;ldquo;skill matrix&amp;rdquo;&lt;/h1>
&lt;p>To find out what some quality pairings would be, you can make a shared table of people and how they feel their skills are out of 5.
It should highlight gaps, and if you update it few weeks/months you use it to track progress.&lt;/p>
&lt;h1 id="planning-work-for-maximal-learning">Planning work for maximal learning&lt;/h1>
&lt;p>In &amp;ldquo;second language acquisition&amp;rdquo;, there is a theory called &amp;ldquo;i+1&amp;rdquo;:
To have a smooth, low-stress learning environment, you feed someone content that is slightly more complex than their current level. In other words, don&amp;rsquo;t throw people in at the deep end.
If you can estimate the complexity (via story points or some other metric), you could combine that with the skill matrix to optimise growth in your employees&amp;rsquo; skill set.&lt;/p>
&lt;h1 id="but-tickets-and-rotations-dont-line-up-nicely">But tickets and rotations don&amp;rsquo;t line up nicely&lt;/h1>
&lt;p>There&amp;rsquo;s a few approaches you could try:&lt;/p>
&lt;ul>
&lt;li>Set pairings for a whole sprint&lt;/li>
&lt;li>Set pairings for only the first ticket in a sprint, and then let people self-organise&lt;/li>
&lt;/ul>
&lt;h1 id="how-can-my-team-see-if-this-works-for-us">How can my team see if this works for us?&lt;/h1>
&lt;ol>
&lt;li>Check if your team is even interested in such an idea&lt;/li>
&lt;li>Make the up-front investment (skills matrix), and continued effort investment (changes to planning/ticket preparation)&lt;/li>
&lt;li>Run a trial for a few weeks. Maybe run a retro on the rotation process, and iterate if you see value there. Scrap it and move on if not.&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>For teams that have already bought into pairing and want to try a more focused approach to maximise their learning: &amp;ldquo;Rota Driven Development&amp;rdquo; could be an interesting experiment to try.&lt;/p></description></item><item><title>Symlinks, syncs, and app configuration</title><status>evergreen</status><link>https://idiosapps.github.io/garden/config-symlink-fast-setup/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/config-symlink-fast-setup/</guid><description>&lt;p>When setting up a new Windows device, there are some tools that can help you to install your apps quickly and easily from the command line (WinGet, chocolatey). Whilst these are great (and can actually install most of your apps), one thing they can’t do is transfer your configuration between devices.&lt;/p>
&lt;p>In this short blog, we’ll be using:&lt;/p>
&lt;ul>
&lt;li>A cloud sync of choice (Google Drive / OneDrive / DropBox etc.)
&lt;ul>
&lt;li>So I have my configuration files on any device&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Symbolic links, in a tiny script file
&lt;ul>
&lt;li>So apps can easily access the backed-up configuration, and sync changes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An application we love, which uses simple configuration files&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>For this worked example, we&amp;rsquo;ll use Espanso, and a folder &amp;ldquo;Junction&amp;rdquo; symlink.&lt;/p>
&lt;p>The folder linking must be done before the source folder (Espanso&amp;rsquo;s config) is created. Either do this before installing the app, or do some file/folder shuffling.
It doesn&amp;rsquo;t matter if the target exists or not.&lt;/p>
&lt;p>In your cloud-sync&amp;rsquo;d folder (&lt;code>%HomePath%\OneDrive\Apps\espanso&lt;/code>), create a file &lt;code>symlink.bat&lt;/code> and add:&lt;/p>
&lt;pre tabindex="0">&lt;code>mklink /J %APPDATA%\espanso %HomePath%\OneDrive\Apps\espanso
&lt;/code>&lt;/pre>&lt;p>In Windows, the &lt;code>%APPDATA%&lt;/code> folder will look like this if the command succeed; note the little arrow on our symlinked folder:&lt;/p>
&lt;p>&lt;img src="symlink_folder_icon.png" alt="Untitled">&lt;/p>
&lt;p>In &lt;code>......./OneDrive/apps/espanso/match/base.yml&lt;/code>, add this to the main &lt;code>matches&lt;/code> body:&lt;/p>
&lt;pre tabindex="0">&lt;code>- trigger: &amp;#34;:synctest&amp;#34;
replace: &amp;#34;your espanso config was sync&amp;#39;d sucessfully!&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Install espanso with default settings&lt;/p>
&lt;p>Espanso startup logs show our symlink folder being loaded in. It does this anyway (nothing special is happening to the file loading&amp;hellip; other than it actually loading from our cloud sync&amp;rsquo;d folder!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">reading&lt;/span> &lt;span style="color:#111">configs&lt;/span> &lt;span style="color:#111">from&lt;/span>&lt;span style="color:#00a8c8">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#00a8c8">C:\\Users\\james\\AppData\\Roaming\\espanso&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">...&lt;/span> &lt;span style="color:#00a8c8">reading&lt;/span> &lt;span style="color:#00a8c8">packages&lt;/span> &lt;span style="color:#00a8c8">from:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#00a8c8">C:\\Users\\james\\AppData\\Roaming\\espanso\\match\\packages&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if we enter our special phrase, &lt;code>:synctest&lt;/code>, we should see it expanded to:&lt;/p>
&lt;p>&lt;code>your espanso config was sync’d sucessfully!&lt;/code>&lt;/p>
&lt;p>On another computer (or a fresh installation of Windows), all you have to do is double-click the .bat file.
In just a few minutes, we&amp;rsquo;ve made a system that will always take care of our favourite Espanso packages &amp;amp; personalised keywords.
Also note that any changes we make will be backed up to the cloud too!&lt;/p>
&lt;hr>
&lt;p>What we’ve done here can be applied to more applications which have simple configuration.
The scripts to create junctions/symbolic links could be per-app, or you could put them all in one script (to be run before a big WinGet/Brew install).&lt;/p>
&lt;p>Here’s a few configurations ones I may set up this synchronisation for:&lt;/p>
&lt;ul>
&lt;li>Headphone EQ - Peace/EqualizerAPO - .txt files represent frequencies/decibels etc.&lt;/li>
&lt;li>GPU Overclock/Undervolt - MSI Afterburner - Custom curve is a bit tricky to make (I have to search for my notes on instructions every time I set up)&lt;/li>
&lt;li>Calibre, for digital book management&lt;/li>
&lt;li>&amp;hellip; I can&amp;rsquo;t think of more, but I&amp;rsquo;m happy even with just Espanso having this :-)&lt;/li>
&lt;/ul>
&lt;p>The same principles apply to Ubuntu and MacOS - but implementation of your symlink script files might look more like &lt;a href="https://apple.stackexchange.com/a/115647">this StackExchange answer&lt;/a>.&lt;/p></description></item><item><title>How to always know when there are PRs to check out 🔮</title><status>seeding</status><link>https://idiosapps.github.io/garden/github-pr-watcher/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/github-pr-watcher/</guid><description>&lt;p>A few weeks ago I heard of SwiftBar, and &lt;a href="https://xbarapp.com/">Xbar&lt;/a>:&lt;/p>
&lt;p>| Put the output from any script or program into your macOS Menu Bar&lt;/p>
&lt;p>There&amp;rsquo;s a great library of plugins on the hub, covering all sorts of topics. Want to show the weather? Show upcoming info about your favourite sports team? Check if graphics cards are in stock? It can do all of this.&lt;/p>
&lt;p>What&amp;rsquo;s also great is the fact that you can see the source code of all the plugins. You can tweak those plugins and make them your own - and it&amp;rsquo;s interesting to understand how people solved these kinds of problems.&lt;/p>
&lt;h1 id="playing-with-plugins-">Playing with plugins 😳&lt;/h1>
&lt;p>I installed a few plugins, said &amp;ldquo;wow&amp;rdquo;, and quickly realised that the Mac Pro&amp;rsquo;s camera notch is a bit annoying - you lose a fair bit of real estate for tools like this! I used &lt;a href="https://github.com/Mortennn/Dozer">Dozer&lt;/a> / &lt;a href="https://github.com/dwarvesf/hidden">Hidden&lt;/a> to get rid of a few non-essential plugins, but they take a couple icons themselves so it didn&amp;rsquo;t help much.&lt;/p>
&lt;p>This taught me that I should be as lean as possible with how many characters I display with any plugin I write. Lots of plugins stick to emojis and numbers - I agree 💯%&lt;/p>
&lt;h1 id="how-an-xbar-plugin-works">How an xbar plugin works&lt;/h1>
&lt;p>The &lt;a href="https://github.com/matryer/xbar-plugins/blob/main/CONTRIBUTING.md">docs&lt;/a> for xbar are pretty good. There&amp;rsquo;s really two parts to a plugin: getting your data, and making xbar display it.&lt;/p>
&lt;p>To show your data, you just echo/println it. How the display is structured (icon, click-on-icon-modal, etc.) is like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># Cycle through &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-two&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;cycle-three&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Next lines only visible in dropdown for this plugin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;--dropdown-item2-something&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;----dropdown-item2-something-yodawg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;--dropdown-item2-somethingElse&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Next item is also in dropdown, separated by horizontal bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;dropdown-item3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="xbar_tree.jpg" width="100%"/>
&lt;/figure>
&lt;p>I think that&amp;rsquo;s far more nesting that I&amp;rsquo;d ever want to use - but it&amp;rsquo;s nice that it&amp;rsquo;s there if you want it. I guess somebody did!&lt;/p>
&lt;p>Anyway, you can put links/colours/shortcuts in there and make it clickable. You can do other stuff like have the user enter variables (&amp;lt;xbar.var&amp;gt;) for the program to access as environment variables (it can&amp;rsquo;t access your actual environment variables).&lt;/p>
&lt;p>Another key feature is deciding how often your plugin updates. The plugin filenames should have a format of {name}.{time}.{ext}, e.g. check_weather.15m.sh.&lt;/p>
&lt;h1 id="writing-an-xbar-plugin">Writing an xbar plugin&lt;/h1>
&lt;p>Lots of teams use Github PRs. xbar seemed like the perfect tool for me to monitor PRs. I&amp;rsquo;ve tried a few systems for monitoring PRs, but I&amp;rsquo;m not a fan of any of them:&lt;/p>
&lt;ul>
&lt;li>I don&amp;rsquo;t like &lt;em>email&lt;/em> spam (one more app/tab, multitasking)&lt;/li>
&lt;li>&lt;em>Chatbots&lt;/em> are either slow (quickly oudated) or spammy&lt;/li>
&lt;li>&lt;em>Manually checking the site&lt;/em> either needs a few page loads or a bookmark - either way, it&amp;rsquo;s not the smoothest experience&amp;hellip; but the problem for me is it doesn&amp;rsquo;t say in advance if there will be any information for you to act on&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>I figured an xbar plugin would let me:&lt;/p>
&lt;ul>
&lt;li>know if I can to merge (required approval count is met, CI checks pass)&lt;/li>
&lt;li>know if I have any comments/suggestions to address&lt;/li>
&lt;li>get a count of how many PRs other people have open&lt;/li>
&lt;li>get a count of how many PRs other people need reviews on&lt;/li>
&lt;li>see if PR checks pass/fail&lt;/li>
&lt;li>do this over multiple repositories&lt;/li>
&lt;/ul>
&lt;p>Your ideology on PRs probably makes you question these goals&amp;hellip; but you can tweak plugins, and you can tweak them to match your ideologies.&lt;/p>
&lt;h1 id="writing-this-plugin-with-bash">Writing this plugin with bash&lt;/h1>
&lt;p>The Github CLI is quite powerful - it can handle a lot of complexity with a clean API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">$&amp;#34;james&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">repo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">$&amp;#34;ourOrg/ourBigRepo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">all_prs&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">$(&lt;/span>gh pr list --repo &lt;span style="color:#111">$repo&lt;/span>&lt;span style="color:#00a8c8">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">$all_prs&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">my_prs&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">$(&lt;/span>gh pr list --repo WeaponX/ourBigRepo --author &lt;span style="color:#111">$username&lt;/span>&lt;span style="color:#00a8c8">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">echo&lt;/span> &lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">$my_prs&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TODO take to browser with --web&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s a lot of &lt;a href="https://cli.github.com/manual/gh_pr_list">options/args&lt;/a> you can use, and other handy commands like &lt;a href="https://cli.github.com/manual/gh_pr_status">gh pr status&lt;/a>. The CLI can natively output to json or use jq filters.&lt;/p>
&lt;p>I had a think about how I&amp;rsquo;d use this to tick off those goals, but for me it seemed easier to use a language I&amp;rsquo;m more familar with.&lt;/p>
&lt;ul>
&lt;li>node.js
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>I get higher order functions (map, filter, reduce, etc.) which can help me focus on what I want, not how to do it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>might need a global npm install of axios for making requests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>- need to figure out how to run a node file as a bash-like file ()&lt;/del>
&lt;ul>
&lt;li>that only took a second to find out and verify - &lt;a href="https://stackoverflow.com/a/24183402/4261132">it&amp;rsquo;s pretty much what you&amp;rsquo;d expect&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scala
&lt;ul>
&lt;li>it&amp;rsquo;s the language I work with, so it&amp;rsquo;d be good to practice more&lt;/li>
&lt;li>&lt;a href="https://scala-cli.virtuslab.org/docs/guides/scripts#self-executable-scala-script">scala-cli&lt;/a> can let you write self-executable scala scripts
&lt;ul>
&lt;li>I was curious how the experience would be, so I went with this&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Of course, sticking with bash would be nice. The Github CLI could be used for simplicity, which some users may already have - or curl could be used for even fewer dependencies. I encourage anyone who finds that challenge interesting to give it a try!&lt;/p>
&lt;h1 id="writing-this-plugin-with-bash-scala">Writing this plugin with &lt;del>bash&lt;/del> Scala&lt;/h1>
&lt;p>The first question is: Node has Axios, Python has Requests&amp;hellip; but what&amp;rsquo;s nice and simple for Scala? Enter Li Haoyi&amp;rsquo;s &lt;a href="https://github.com/com-lihaoyi/requests-scala">requests-scala&lt;/a>. Let&amp;rsquo;s install &lt;a href="https://scala-cli.virtuslab.org/install">scala-cli&lt;/a> and have a try:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env -S scala-cli shebang
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>import &lt;span style="color:#111">$ivy&lt;/span>.&lt;span style="color:#d88200">`&lt;/span>com.lihaoyi::requests:0.7.1&lt;span style="color:#d88200">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import &lt;span style="color:#111">$ivy&lt;/span>.&lt;span style="color:#d88200">`&lt;/span>com.lihaoyi::ujson:2.0.0&lt;span style="color:#d88200">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>val &lt;span style="color:#111">resp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> requests.get&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;https://api.github.com/users/lihaoyi&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>val &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ujson.read&lt;span style="color:#f92672">(&lt;/span>resp.text&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;login&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#75715e"># username&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s close, it just needs a little tweak to the suggested shebang: for my MacOs brew install, &lt;code>#!/usr/bin/env /opt/homebrew/bin/scala-cli&lt;/code> works. Scala-cli is pulling in those Ivy dependencies and using them, very nice.&lt;/p>
&lt;p>To keep the blog short, you can what I&amp;rsquo;ve got so far here: &lt;a href="https://github.com/IdiosApps/xbar-github-pr">xbar-github-pr&lt;/a>. At this time it just shows PR counts summed over multiple repositories for your PRs and others'.&lt;/p>
&lt;p>TODO - add a screenshot&amp;hellip; or maybe in the goals section to get interest earlier?&lt;/p>
&lt;p>For now it&amp;rsquo;s basic but it&amp;rsquo;s a useful gauge/reminder. It can definitely be more useful, and meet more of the &lt;a href="#goals">goals&lt;/a> we set up. At some point I&amp;rsquo;ll extend on it, make it more idiomatic, and clean it up. It&amp;rsquo;s pretty much a dirty POC at the time of writing, but nevertheless I wanted to share it.&lt;/p>
&lt;p>Also note it was written for Github Enterprise, so might need a few small tweaks to work for public repos (mostly around the URLs used). Be respectful your scripts&amp;rsquo; frequency (remember, it&amp;rsquo;s in the filename, e.g. &lt;code>github-pr-checker.1h.sc&lt;/code>)&lt;/p>
&lt;p>Writing scripts with Scala-cli was generally pleasant, and I will likely reach for it again when solving similar problems - however I couldn&amp;rsquo;t figure out how to have a great user experience. There are &lt;a href="https://scala-cli.virtuslab.org/docs/commands/setup-ide/">IDE setup docs for scala-cli&lt;/a>, which could have helped improve highlighting or autocompletion. They do acknowledge &lt;a href="https://scala-cli.virtuslab.org/docs/guides/ide/">IDE user experience could be better&lt;/a>.&lt;/p>
&lt;h1 id="but-im-on-windows--linux">But I&amp;rsquo;m on Windows / Linux&lt;/h1>
&lt;p>todo: have a look for alternatives that use plugins and thus could use this stuff too&lt;/p></description></item><item><title>Navigating multiple projects with IntelliJ &amp; MacOS</title><status>evergreen</status><link>https://idiosapps.github.io/garden/intellij-project-tabs/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/intellij-project-tabs/</guid><description>&lt;p>Microservices are pretty common nowadays, and often services gets their own repo. That has pros and cons, but one of the biggest cons you see day-to-day is that navigating multiple projects in IntelliJ &lt;del>isn&amp;rsquo;t&lt;/del> wasn&amp;rsquo;t a great experience.&lt;/p>
&lt;ul>
&lt;li>Do you switch between projects/folders in &lt;strong>IntelliJ&lt;/strong>?&lt;/li>
&lt;li>Do you hate janky, slow UI reloads when switching projects?&lt;/li>
&lt;li>Are you on &lt;strong>MacOS&lt;/strong>, and are on (or can get to) Big Sur or later?&lt;/li>
&lt;/ul>
&lt;p>If you answered yes to all of these questions, this post will interest you. Your IntelliJ can look like this:&lt;/p>
&lt;figure>&lt;img src="intellij_project_tabs.jpg" width="100%"/>
&lt;/figure>
&lt;p>You can even close/re-order tabs 😍&lt;/p>
&lt;h1 id="how-do-i-get-this-setup">How do I get this setup?&lt;/h1>
&lt;p>According to JetBrains, &lt;a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360010142139/comments/360002541180">this is a Big Sur only IntelliJ feature&lt;/a>. I guess it should also work on other JetBrains products, like WebStorm or PyCharm.&lt;/p>
&lt;ul>
&lt;li>Go to IntelliJ&amp;rsquo;s preferences&lt;/li>
&lt;li>Go to Appearance &amp;amp; behaviour, then System Settings&lt;/li>
&lt;li>Choose &amp;ldquo;New window&amp;rdquo; or &amp;ldquo;Ask&amp;rdquo; (it&amp;rsquo;s counter intuitive, I know!)
&lt;ul>
&lt;li>If you choose &amp;ldquo;Ask&amp;rdquo; and want a project to appear as a tab, choose &amp;ldquo;New window&amp;rdquo; in the popup dialogue when you open a project&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="intellij_preferences.jpg" width="100%"/>
&lt;/figure>
&lt;ul>
&lt;li>Go to MacOS System Settings&lt;/li>
&lt;li>Go to General&lt;/li>
&lt;li>Choose &amp;ldquo;always&amp;rdquo; for Prefer tabs&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="macos_general_settings.jpg" width="100%"/>
&lt;/figure>
&lt;h1 id="closing-notes">Closing notes&lt;/h1>
&lt;ul>
&lt;li>Thanks to a few Stack Overflow posts/answers/comments &lt;a href="https://stackoverflow.com/a/65451682/4261132">1&lt;/a>, &lt;a href="https://stackoverflow.com/a/69350085/4261132">2&lt;/a>, &lt;a href="https://stackoverflow.com/a/71495096/4261132">3&lt;/a>. They helped clarify how the confusing setup should be done.&lt;/li>
&lt;li>Don&amp;rsquo;t question why my default browser is Microsoft Edge&lt;/li>
&lt;/ul></description></item></channel></rss>