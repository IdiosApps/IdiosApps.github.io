<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Digital Garden on James' Digital Garden</title><link>https://idiosapps.github.io/garden/</link><description>Recent content in Digital Garden on James' Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>James Clark ©</copyright><lastBuildDate>Fri, 01 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idiosapps.github.io/garden/index.xml" rel="self" type="application/rss+xml"/><item><title>Career - Disney Streaming - What I Done</title><status>seeding</status><link>https://idiosapps.github.io/garden/disney-what-i-done/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/disney-what-i-done/</guid><description>&lt;p>Outside of usual sprint project work (Scala Functional Programming microservices), I enjoyed dabbling with different bits of tech and ideas (mostly tech/way of working related) in my time at Disney Streaming so far!&lt;/p>
&lt;h1 id="migrating-our-team-to-kubernetes">Migrating our team to Kubernetes&lt;/h1>
&lt;p>We were running our applications on a bespoke ECS-like platform - which worked fairly well, apart from deployments regularly failing due to nodes being too small to fit pods onto. It has health checks, self-healing properties, etc. like Kubernetes - but you can&amp;rsquo;t easily &lt;code>ssh&lt;/code> into pods even in non-prod environments easily. There&amp;rsquo;s more reasons for the move, but basically there&amp;rsquo;s a company-wide effort to move to EKS.&lt;/p>
&lt;p>I loved using Kubernetes (with k9s!) at Sainsbury&amp;rsquo;s, so I volunteered to lead this migration project for our team. Here&amp;rsquo;s some things I learned whilst leading this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A shared knowledge base such as Google Docs works great. We captured key meeting notes, decisions, diagrams, etc. here.&lt;/p>
&lt;ul>
&lt;li>Anyone can get up to speed quickly&lt;/li>
&lt;li>Easy to ask questions, add comments&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Creating a &amp;ldquo;team training Slack channel&amp;rdquo; for a new tech domain works great&lt;/p>
&lt;ul>
&lt;li>As you work through the training, questions, problems, and solutions crystallise&lt;/li>
&lt;li>All information is contained neatly in the channel, not spread all over various places
&lt;ul>
&lt;li>It&amp;rsquo;s easier to collate key points and give feedback to the course owners&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You can expand the channel beyond just your team, sharing the benefits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For real-time knowledge sharing, encourage various people to take tickets on the work. Pair with them for smooth KT&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In refinement, it can be great to call out a ticket as a pairing ticket - a &amp;ldquo;🍐&amp;rdquo; emoji in the title is a nice reminder that some felt they had something new to learn from it&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="jenkins">Jenkins&lt;/h1>
&lt;ul>
&lt;li>Consider adding a &amp;ldquo;notes&amp;rdquo; text parameter to some builds. Even if you don&amp;rsquo;t update the build description with this, it can be very useful to know why some builds were run (e.g. manual perf testing of a branch - what change, what is expected)&lt;/li>
&lt;li>For performance tests, put time-stamped links to observability platforms (DataDog, Grafana, etc.) in the output - it really helps the ergonomics of diagnosing any issues. Lower barrier to entry helps keep performance high!&lt;/li>
&lt;li>Be mindful of how many messages you&amp;rsquo;re sending to Slack, and where. If there&amp;rsquo;s just a little traffic, it can go to a visible team chat. If it&amp;rsquo;s noisy, it&amp;rsquo;ll probably go to a chat where people don&amp;rsquo;t look as often!&lt;/li>
&lt;/ul>
&lt;h1 id="github-actions">GitHub Actions&lt;/h1>
&lt;p>Apart from linting, auto-fixing, formatting, etc. there are some really cool things you can do with GHA and GH&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Have a fairly complex/tedious workflow for e.g. building docker images and performance testing them on a branch? Use ChatOps to listen to a command and let an Action do it for you&lt;/p>
&lt;ul>
&lt;li>It can reply with a comment, linking to the builds, perf tests, dashboards, etc.&lt;/li>
&lt;li>It can describe what process it is doing, for more explicit documentation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use Chinthakagodawita&amp;rsquo;s &lt;a href="https://github.com/chinthakagodawita/autoupdate">autoupdate&lt;/a> action to keep PR&amp;rsquo;s up-to-date with the &lt;code>main&lt;/code> branch&lt;/p>
&lt;ul>
&lt;li>If you have &lt;code>auto merge&lt;/code> enabled, you can use the &lt;code>PR_FILTER&lt;/code> of &lt;code>auto_merge&lt;/code>
&lt;ul>
&lt;li>Done reviewing 5 PRs? Hit auto merge on them, and this will keep them merging until they&amp;rsquo;re all done!&lt;/li>
&lt;li>Without this, you&amp;rsquo;d have to wait and press &amp;ldquo;merge from main&amp;rdquo; four times. That could be like 10-30 minutes being distracted!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Open source contributions:&lt;/p>
&lt;ul>
&lt;li>Coursier&amp;rsquo;s &lt;code>setup-action&lt;/code> is &amp;ldquo;A GitHub Action to install Coursier and use it to install Java and Scala CLI tools.&amp;rdquo;. It can set up various Java verisons and distributions.
&lt;ul>
&lt;li>We use Amazon Corretto at work, and AWS. I [added Corretto to the jvm-index repo](&lt;a href="https://github.com/coursier/setup-action">https://github.com/coursier/setup-action&lt;/a> &lt;a href="https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)">https://github.com/coursier/jvm-index/blob/master/src/Corretto.scala)&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="docusaurus">Docusaurus&lt;/h1>
&lt;p>I was familiar with Hugo&amp;rsquo;s Doks static site generator, and was happy to try a new SSG here: Docusaurus.&lt;/p>
&lt;p>We were on Docusaurus 1, and we had a lot of complexity with the sidebar, document ordering, etc.. - so I was happy to simplify things and upgrade us to Docusuaurs 2. Here&amp;rsquo;s a few tips:&lt;/p>
&lt;ul>
&lt;li>Set up &lt;a href="https://github.com/marketplace/actions/deploy-pr-preview">PR preview&lt;/a>, so non-developers can see what their changes look like
&lt;ul>
&lt;li>You might need to &amp;ldquo;recreate&amp;rdquo; the Action from scratch to avoid nesting (it&amp;rsquo;s a composite action) - see &lt;a href="https://github.com/rossjrw/pr-preview-action/issues/33">this issue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consider adding comments to your site, so people can reach out with the context directly above. &lt;a href="https://utteranc.es/">utteranc.es&lt;/a> can help with this&lt;/li>
&lt;li>Add light/dark src/css/custom.css to match the rest of your project&amp;rsquo;s branding&lt;/li>
&lt;li>For user-facing documentation, add a FAQ page. This could save a lot of time helping resolve confusion on your most common questions!&lt;/li>
&lt;/ul>
&lt;h1 id="meetings">Meetings&lt;/h1>
&lt;ul>
&lt;li>Enable closed captions
&lt;ul>
&lt;li>Having the auto-generated subtitles should be accurate enough to help some of your team follow the conversation&lt;/li>
&lt;li>If the auto-generated subtitles are garbage, you probably need to spend some budget on upgrading microphones. If the computer can&amp;rsquo;t understand you, maybe humans are having an issue too!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="calendar">Calendar&lt;/h1>
&lt;ul>
&lt;li>If a meeting is recorded, but a link to the recording in the invite. It gives a real home to the recording, rather than just a Slack message that gets lost. Helpful for people coming back from holiday/sickness - can flick through Calendar and get straight into the meetings they need to catch up on&lt;/li>
&lt;/ul>
&lt;h1 id="build-caching">Build caching&lt;/h1>
&lt;p>Compiling your apps from scratch every time is a waste of time &amp;amp; energy.
Some build tools support delta/partial compilation - if only 1 file in 1000 changed, we can base our compile around that.
GitHub Actions has a few options for caching dependencies, e.g. &lt;a href="https://github.com/actions/cache">https://github.com/actions/cache&lt;/a> or &lt;a href="https://github.com/coursier/cache-action">https://github.com/coursier/cache-action&lt;/a>. That &lt;em>could&lt;/em> help a little.
Some build tools have a remote cache - that&amp;rsquo;s great for quicker builds on CI. But, if you don&amp;rsquo;t have a remote cache - what can you do?&lt;/p>
&lt;p>Our team uses our own &lt;code>mill&lt;/code> build tool container. It already ran some basic checks to check it&amp;rsquo;d work with our project and could initialise some &amp;ldquo;workers&amp;rdquo; - but didn&amp;rsquo;t do any caching. Here&amp;rsquo;s what I did:&lt;/p>
&lt;ul>
&lt;li>Use a wrapper &lt;code>millw&lt;/code>, a bit like &lt;code>gradlew&lt;/code>. This would allow the container to build for any &lt;code>.mill-version&lt;/code>, by downloading the necessary tooling
&lt;ul>
&lt;li>If we merge a build tool upgrade in our main repo, builds would still work without requiring a manual rebuild on the new version of this image. Not technically efficient due to the redownloads of the build tool, but ultimately removing some toil in making things a little smoother for humans.&lt;/li>
&lt;li>Compile, check formatting, fixing, etc. to generate these outputs in &lt;code>out&lt;/code>, as well as downloading dependencies&lt;/li>
&lt;li>To prevent being over-written, run &lt;code>mv /root/build/out /root/out-cache&lt;/code>. In Jenkins jobs for app builds, move this cache back (if the build is parameterised with using the cache). Dependencies cache doesn&amp;rsquo;t need moving.&lt;/li>
&lt;li>The cache doesn&amp;rsquo;t have to be used. It adds some size, but storage is cheap and saved time/energy is valuable. We use it for PR builds (not &lt;code>main&lt;/code> - that&amp;rsquo;s clean), and&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The outcome of this is that, several minutes are shaved off each module (more or less, each microservice) build time. &lt;em>Faster PR compilations means faster PR checks, which means delivering value faster and reducing our mean time to recovery.&lt;/em> It also means faster builds for ChatOps triggering branch builds + perf tests, giving fast feedback on performance critical code changes!&lt;/p>
&lt;p>I was pleased with doing this, as using &lt;code>deltas&lt;/code> like this has seemed awesome to me for a long time. I was amazed as a teenager when one Android custom ROM could deliver OTA updates 10x smaller than anyone else, by using deltas.&lt;/p>
&lt;h1 id="performance-tests">Performance tests&lt;/h1>
&lt;p>In your performance testing platform (we use Gatling), consider what types of test you want to have, and what should be compared:&lt;/p>
&lt;ul>
&lt;li>nightly, load (main)
&lt;ul>
&lt;li>I made them run for longer (why not? nobody is manually testing on the &lt;code>perf&lt;/code> env at 3am)&lt;/li>
&lt;li>I made them run at peak RPS for 75% of the run time (configurable). Previously, only about 20% of the time was at peak RPS. Choose a traffic shape gives your services a proper workout!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>soak (main)
&lt;ul>
&lt;li>Have seen dependencies clash and lead to slow memory leaks; soak tests protect us from this, run over the weekend&lt;/li>
&lt;li>I oversaw various performance test changes around this time after identifying improvements with the team in a post-mortem.&lt;/li>
&lt;li>Here, we basically decrease the load a little bit (75% of nightly) and run for much longer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>load (branch)
&lt;ul>
&lt;li>results could be very far from average results on &lt;code>main&lt;/code>, so have separate simulation to keep your &amp;ldquo;usually good&amp;rdquo; simulations clean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="git-hooks">Git hooks&lt;/h1>
&lt;p>Git hooks are great - ensure your code is linted/compilable/tested before pushing.
What&amp;rsquo;s even cooler is combining them with interactive CLI tooling like &lt;code>gum&lt;/code> - see my &lt;a href="https://github.com/IdiosApps/gummy-hooks">&amp;ldquo;gummy hooks&amp;rdquo;&lt;/a> examples.&lt;/p>
&lt;ul>
&lt;li>Iterate quicker by using a bash script and just calling it - you don&amp;rsquo;t actually have to do anything with Git to iterate on it.&lt;/li>
&lt;/ul></description></item><item><title>ChatOps - just say the word</title><status>seeding</status><link>https://idiosapps.github.io/garden/chatops/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/chatops/</guid><description>&lt;p>ChatOps: you say some trigger, and you get some response. The processing behind the scenes can be as complex or niche as you like.&lt;/p>
&lt;p>In this blog, we&amp;rsquo;ll talk about three different ChatOps tools (Slack, GitHub Actions, Hubot) and how they can:&lt;/p>
&lt;ul>
&lt;li>Set up a basic reminder (Slack)&lt;/li>
&lt;li>Trigger image builds, performance tests, etc. on PRs (GitHub Actions)&lt;/li>
&lt;li>Send a list of open PRs, and their review counts, to Slack (Hubot)&lt;/li>
&lt;/ul>
&lt;h1 id="slack">Slack&lt;/h1>
&lt;p>Slack has a few &lt;a href="https://slack.com/intl/en-gb/help/articles/360057554553-Use-shortcuts-to-take-actions-in-Slack">baked in commands (&amp;ldquo;Shortcuts&amp;rdquo;)&lt;/a>.
The most useful I&amp;rsquo;ve seen is reminders - whether for yourself or for your team. Here&amp;rsquo;s a few examples, with the format []&lt;code>/remind [yourself or #channel] [what] [when].&lt;/code>](&lt;a href="https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)">https://slack.com/intl/en-gb/help/articles/208423427-Set-a-reminder)&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>/remind #my-team to join &lt;a href="https://meet.google.com/?pli=1">Google Meet&lt;/a> on Wednesday at 4:30pm&lt;/li>
&lt;li>/remind me to file TPS reports in 20 minutes&lt;/li>
&lt;li>/remind me to have a great weekend every Friday at 5pm&lt;/li>
&lt;/ul>
&lt;h1 id="github-actions">GitHub Actions&lt;/h1>
&lt;p>Note: If you have a project on Public GitHub, you can use their action &amp;ldquo;runners&amp;rdquo; for free. If you&amp;rsquo;re in the GitHub Enterprise Suite, you&amp;rsquo;ll need to deploy your own &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow#using-default-labels-to-route-jobs">&lt;code>runs-on: [self-hosted]&lt;/code>&lt;/a> &amp;ldquo;runners&amp;rdquo;. There are some projects that can help you kick-start self-hosting, such as &lt;a href="https://github.com/philips-labs/terraform-aws-github-runner">the scalable spot instance setup
&amp;ldquo;terraform-aws-github-runner&amp;rdquo;.&lt;/a>&lt;/p>
&lt;p>perf tests awkward process, evolving over time as we change our Jenkins pipelines to multibranch etc.&lt;/p>
&lt;p>very valuable - perf test before merge&lt;/p>
&lt;p>low barrier to entry: chat ops. Ask a PR to be perf tested, and an hour later you have&lt;/p>
&lt;ol>
&lt;li>docker images build&lt;/li>
&lt;li>applications performance tested&lt;/li>
&lt;/ol>
&lt;h1 id="hubot">Hubot&lt;/h1></description></item><item><title>Ways of Working 'checklist'</title><status>seeding</status><link>https://idiosapps.github.io/garden/ways-of-working-checklist/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/ways-of-working-checklist/</guid><description>&lt;p>Every team will figure out their own unique ways of working through &amp;ldquo;Forming, Storming, Norming and Performing&amp;rdquo; - but here are some techniques that I&amp;rsquo;ve seen provide lots of value - usually with little effort!&lt;/p>
&lt;p>✏ Why not take a note of each one you aren&amp;rsquo;t using yet as you read?&lt;/p>
&lt;h1 id="github">GitHub&lt;/h1>
&lt;h2 id="pr-templates">PR Templates&lt;/h2>
&lt;p>Open source projects often have multiple PR templates, to help capture context on &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates#issue-templates">bug reports, feature requests, and security vulnerabilities.&lt;/a>&lt;/p>
&lt;p>In your team&amp;rsquo;s day-to-day repositories, it&amp;rsquo;s likely you aren&amp;rsquo;t using templates. Maybe they &amp;ldquo;get in the way&amp;rdquo; and &amp;ldquo;just get deleted&amp;rdquo;, but these two features might make it more interesting!&lt;/p>
&lt;h3 id="markdown-comments">Markdown comments&lt;/h3>
&lt;p>GitHub uses MarkDown (their own special flavour of MarkDown, really) - and it supports comments:&lt;/p>
&lt;p>&lt;code>example md comment&lt;/code>&lt;/p>
&lt;p>These comments are only visible when editing - you can&amp;rsquo;t see them on the posted description.
You can use comment to give friendly reminders on:&lt;/p>
&lt;ul>
&lt;li>Providing context&lt;/li>
&lt;li>Linking to the ticket (rather than paraphrasing all that context!)&lt;/li>
&lt;li>Ensuring tests (unit, integration, performance) are covered
&lt;ul>
&lt;li>You could give a commented-out checklist if you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="autolinks">AutoLinks&lt;/h3>
&lt;p>In each GitHub repository, you can set up &amp;ldquo;AutoLinks&amp;rdquo;. They&amp;rsquo;re basically an autogenerated, tidy hyperlink.&lt;/p>
&lt;p>The GitHub Docs give a good example - but I&amp;rsquo;ll extract a snippet and save you getting distracted:&lt;/p>
&lt;ul>
&lt;li>Reference prefix: &lt;code>JIRA-&lt;/code>&lt;/li>
&lt;li>Target URL: &lt;code>https://jira.example.com/issue?query=&amp;lt;num&amp;gt;&lt;/code>&lt;/li>
&lt;li>Preview: &lt;code>JIRA-123&lt;/code> is converted to &lt;code>https://jira.example.com/issue?query=123&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Combined with templates, you can ensure that every PR has a short link to the relevant tickets.
This is much better than just having the ticket number (and no link) in the title/description/branch/commits:&lt;/p>
&lt;ul>
&lt;li>It saves the PR author time in making these links&lt;/li>
&lt;li>It saves the reviewers time fishing around in Jira and getting distracted&lt;/li>
&lt;li>It ensures everyone has easily accessible context, so the PR description can focus on the actual changes&lt;/li>
&lt;/ul>
&lt;p>Until I knew this I was using an Espanso text expansion macro &lt;code>:JIRA&lt;/code> to do similar, but this setup gives your whole team an awesome shared capability&lt;/p>
&lt;h3 id="conventional-comments">Conventional comments&lt;/h3>
&lt;p>Stating the importance &amp;amp; intent of your message up front can make communication clearer, and decisions faster.&lt;/p>
&lt;p>Read more in detail at &lt;a href="https://conventionalcomments.org/">https://conventionalcomments.org/&lt;/a>, but basically comments on PRs can look more valuable like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>issue: this mock never gets called!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>praise: this method is really easy to read, and handles the logic very well
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>nitpick: these two tests could be combined
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the latter example to how it might be expressed without &amp;ldquo;conventional comments&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>These two tests could be combined, but it&amp;#39;s not a blocker for this PR and I&amp;#39;ll approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conventional-commits">Conventional commits&lt;/h3>
&lt;p>Commits can look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docs: add javadocs for user-facing swagger api&lt;/code>&lt;/li>
&lt;li>&lt;code>bug: fix a flaky test&lt;/code>&lt;/li>
&lt;li>&lt;code>chore: bump dependency version x-&amp;gt;y&lt;/code>&lt;/li>
&lt;li>&lt;code>feat: AI face detection when user blinks&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>It could help you have a more atomic git history, which may make PRs easier to comb through.
You can also use the prefixes to group changes, and make prettier changelogs.&lt;/p>
&lt;p>Read more: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/p>
&lt;h1 id="tickets--work-capture">Tickets / work capture&lt;/h1>
&lt;h2 id="make-templates">Make templates&lt;/h2>
&lt;ul>
&lt;li>Context, task, ACs, key contacts,&lt;/li>
&lt;li>User stories&lt;/li>
&lt;/ul>
&lt;p>Templates are all about adding context in an organised way.
Having this context gives your team more autonomy and interest in the problems, and can lead to better outcomes. Think &amp;ldquo;Context over control&amp;rdquo;&lt;/p>
&lt;h1 id="knowledge-management">Knowledge management&lt;/h1>
&lt;p>How are you recording your knowledge? Probably in a few places! It might look like this:&lt;/p>
&lt;ul>
&lt;li>Slack (short term - threads can be linked, good for captured asynchronous discussion)&lt;/li>
&lt;li>Google Docs (also great for captured async discussion, but leaning towards )&lt;/li>
&lt;li>Confluence (longer-term storage for internal decisions - awkward to collaborate on, not good for regular updates)&lt;/li>
&lt;li>Websites (static sites like Hugo&amp;rsquo;s Doks &amp;amp; Docusaurus can make information presentable, searchable, and written in simple markdown &amp;amp; managed by e.g. Git)&lt;/li>
&lt;li>Some loose markdown files in various repos (maybe some readme.md)&lt;/li>
&lt;/ul>
&lt;p>To get someone up to speed on your project, you&amp;rsquo;d probably start with the higher-level, more organised/presentable formats. Hopefully there is a natural flow through the information, otherwise someone who knows the scenery may have to plan a route for you.&lt;/p>
&lt;p>But what if there were tools that combined the strengths of these platforms. Are there any services that are:&lt;/p>
&lt;ul>
&lt;li>simple: are written in simple markdown-like language&lt;/li>
&lt;li>collaborative: many users can write in real-time&lt;/li>
&lt;li>efficient: easy to convert discussions into clean documentation&lt;/li>
&lt;li>searchable: text search, or even graph search (how do ideas and documentation naturally relate?)&lt;/li>
&lt;/ul>
&lt;h2 id="notion">Notion&lt;/h2>
&lt;p>I use Notion, which covers these points well. It&amp;rsquo;s becoming more and more popular, and I&amp;rsquo;ve seen a few companies using it.
Despite appearing simple, there&amp;rsquo;s plenty of power features under the hood:&lt;/p>
&lt;ul>
&lt;li>You can create tables of data - and create views over them, filter, sort, label and organise in helpful ways&lt;/li>
&lt;li>You can make timelines, calendars&lt;/li>
&lt;li>You can use it like a task management system (GTD, four quadrants - whatever you want)&lt;/li>
&lt;li>You can use it as a sprint/kanban board&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s powerful - even for free users.
For businesses, it&amp;rsquo;s at least $15 per user, per month. That sounds like quite a lot, but &lt;a href="https://www.atlassian.com/software/jira/pricing?&amp;amp;aceid=&amp;amp;adposition=&amp;amp;adgroup=144583507597&amp;amp;campaign=19306719987&amp;amp;creative=642044705684&amp;amp;device=c&amp;amp;keyword=jira%20cost&amp;amp;matchtype=e&amp;amp;network=g&amp;amp;placement=&amp;amp;ds_kids=p74602839944&amp;amp;ds_e=GOOGLE&amp;amp;ds_eid=700000001558501&amp;amp;ds_e1=GOOGLE&amp;amp;gclid=Cj0KCQjwr82iBhCuARIsAO0EAZwOOUXmPpGJL3jh7S3mnHU5GnfebfyTdNgpRlczLTWDG9gWD0QTlGkaAs1cEALw_wcB&amp;amp;gclsrc=aw.ds">it looks like Jira costs the same&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve never worked in a company using it as a central tool in all the ways above - so I can&amp;rsquo;t actually vouch for it. Maybe it only works up to a certain scale of organisation - but maybe that could be your organisation.&lt;/p>
&lt;h2 id="obsidian">Obsidian&lt;/h2>
&lt;p>I didn&amp;rsquo;t get far into Obsidian - the theory can get pretty deep, and there&amp;rsquo;s many methodologies. You might have heard of:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Second brain&amp;rdquo;, and&lt;/li>
&lt;li>&amp;ldquo;Zettelkasten&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>The key concept is that ideas are related, and naturally link up (like in our brain).
You can view them as a graph (looks like synapses in our brain), converge, and diverge thoughts whilst keeping them linked.
There&amp;rsquo;s also a cool plugin system. I had a play and set up cloud sync to GitHub and OneDrive. I&amp;rsquo;ve already got years of notes in Notion, and didn&amp;rsquo;t quite get sold on Obsidian.&lt;/p>
&lt;p>Arguably, the notes (and their relations!) might not be personal enough to be maximally useful for everyone. However, across a small team it could work really well. &lt;a href="https://obsidian.md/pricing">$50 per user, per year - plus about $100 a year for sync.&lt;/a>&lt;/p>
&lt;p>If you think you&amp;rsquo;re having problems in some of those areas, maybe try a different knowledge management system.
This is totally not an advert ;) I&amp;rsquo;d just love to see first-hand how these tools could work for some teams instead of the usual Jira/Confluence fare! If you have some 💲 and some ⌛, your team could spike using these tools.&lt;/p>
&lt;h1 id="discussions">Discussions&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Problem&lt;/th>
&lt;th>Solution&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rabbit holes&lt;/td>
&lt;td>Be mindful of topics dominating meetings - consider a separate meeting/thread to go into specifics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Circling&lt;/td>
&lt;td>Be mindful of discussions looping. Raise the concern, or capture notes everyone can see and help to align on a plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uncaptured discussion&lt;/td>
&lt;td>Take notes and share them. Ask for corrections, as you may have misunderstood. Whether it&amp;rsquo;s minutes for regular meetings, or details in ticket refinement - capturing 5 minutes of context now can save a few minutes in the future&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Discussion contains too many moving pieces&lt;/td>
&lt;td>Make a quick sketch, in TLDRAW or even Mermaid. Humans find it hard to remember 5-9 &amp;ldquo;bits&amp;rdquo; of info - compress ideas into a visual)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Out of office/ill teammates missed important discussion meetings&lt;/td>
&lt;td>Record the meetings, and update the calendar invite with the recording link. Transcribe the audio, provide a searchable interface to save time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Solutionising without being aligned&lt;/td>
&lt;td>Define the problem statement. &amp;ldquo;What questions are we trying to answer?&amp;rdquo;, &amp;ldquo;What data lets us answer these questions?&amp;rdquo;, &amp;ldquo;How can we get that data?&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="collaborative-working">Collaborative working&lt;/h1>
&lt;h2 id="visible-welcoming-huddles">Visible, welcoming huddles&lt;/h2>
&lt;p>Is your team pairing and mobbing, but in private calls?
It&amp;rsquo;s not transparent or welcoming - so consider this:&lt;/p>
&lt;p>Take the number of devs you have, and divide by two. Make this many &amp;ldquo;pairing&amp;rdquo; Slack channels.
It gives a space for everyone to pair, or form mobs. If someone needs help, it&amp;rsquo;s easy to hop in and out without the complexity of setting up more calls.&lt;/p>
&lt;h2 id="remote-pairing">Remote pairing&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Review&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Zoom&lt;/td>
&lt;td>Solid screenshare quality, awkward drawing tools, and confusing controls. Preferred screen-sharing platform for now&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Slack&lt;/td>
&lt;td>Worst screenshare &amp;amp; audio quality. Most convenient to drop in/out with pairing channels&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VS Code&lt;/td>
&lt;td>Shared editor &amp;amp; terminal are good - but the file explorer seems too strict to let the guest explore the project and be productive&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intellij&lt;/td>
&lt;td>Code With Me is decent now - my main issue is the Shared Terminal is completely broken for the host (a big problem if you run your tests there!)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://tuple.app/">Tuple&lt;/a>&lt;/td>
&lt;td>Great screenshare quality (configurable), good interactivity. Configuration maybe a bit too permissive, but necessary. Great features like &amp;ldquo;pebble drop&amp;rdquo; to show where you&amp;rsquo;re looking&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quality-checks">Quality checks&lt;/h1>
&lt;ul>
&lt;li>git hooks&lt;/li>
&lt;li>github actions has a broad marketplace&lt;/li>
&lt;/ul></description></item><item><title>Rota Driven Development ⁉</title><status>evergreen</status><link>https://idiosapps.github.io/garden/rota-driven-development/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/rota-driven-development/</guid><description>&lt;p>How can you take a bunch of T-shaped developers and upskill everyone to be a 🟩-shaped developer?&lt;/p>
&lt;p>You might know a few ways you can do this already:&lt;/p>
&lt;ul>
&lt;li>Knowledge sharing sessions&lt;/li>
&lt;li>Pairing/Mobbing&lt;/li>
&lt;li>Giving regular, honest feedback&lt;/li>
&lt;/ul>
&lt;p>You might know why it could be a good idea:&lt;/p>
&lt;ul>
&lt;li>Employees want to be empowered&lt;/li>
&lt;li>Learning, teaching, and broadening horizons can be rewarding &amp;amp; fun&lt;/li>
&lt;li>Reduced &amp;ldquo;bus factor&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>But what would something &lt;em>really extreme&lt;/em> look like?
Enter: &amp;ldquo;Rota Driven Development&amp;rdquo;
&lt;em>Note: You might even want to experiment with this setup if you already have pairing/mobbing as your main way of working. Otherwise, this might sound quite terrible! But let&amp;rsquo;s see how it might be valuable. This post isn&amp;rsquo;t about why pairing is good or bad - but what an extreme variant of it could look like&lt;/em>&lt;/p>
&lt;h1 id="illustrative-example">Illustrative example&lt;/h1>
&lt;p>Let&amp;rsquo;s say we have three developers:&lt;/p>
&lt;ul>
&lt;li>BackEnd expert (B), with a bit of Cyber (c) [Bc_]&lt;/li>
&lt;li>Cyber expert (C), no other experience [&lt;em>C&lt;/em>]&lt;/li>
&lt;li>FrontEnd expert (F), with a bit of BackEnd (b) [b_F]&lt;/li>
&lt;/ul>
&lt;p>When you pair these developers, they&amp;rsquo;ll level up by working on tasks together:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[Bc_] + [b_F] -&amp;gt; [Bcf] + [B_F] (let&amp;rsquo;s say the BackEnd expert didn&amp;rsquo;t share much on Cyber this time)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[B_F] + [&lt;em>C&lt;/em>] -&amp;gt; [BcF] + [bCf] (they worked across all three topics)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Already, the team is becoming much more well-rounded. Everyone has picked up at least the basics of every field.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, it&amp;rsquo;s an extreme example. More realistically, there could be many domains (framework, syntax, literally domain knowledge, etc.) within any of these three fields - so it can still make sense for e.g. BackEnd developers only.&lt;/p>
&lt;p>In a real team, there would probably be a few more people as well - so everyone can Always Be Transferring Knowledge&lt;/p>
&lt;h1 id="your-teams-skill-matrix">Your team&amp;rsquo;s &amp;ldquo;skill matrix&amp;rdquo;&lt;/h1>
&lt;p>To find out what some quality pairings would be, you can make a shared table of people and how they feel their skills are out of 5.
It should highlight gaps, and if you update it few weeks/months you use it to track progress.&lt;/p>
&lt;h1 id="planning-work-for-maximal-learning">Planning work for maximal learning&lt;/h1>
&lt;p>In &amp;ldquo;second language acquisition&amp;rdquo;, there is a theory called &amp;ldquo;i+1&amp;rdquo;:
To have a smooth, low-stress learning environment, you feed someone content that is slightly more complex than their current level. In other words, don&amp;rsquo;t throw people in at the deep end.
If you can estimate the complexity (via story points or some other metric), you could combine that with the skill matrix to optimise growth in your employees&amp;rsquo; skill set.&lt;/p>
&lt;h1 id="but-tickets-and-rotations-dont-line-up-nicely">But tickets and rotations don&amp;rsquo;t line up nicely&lt;/h1>
&lt;p>There&amp;rsquo;s a few approaches you could try:&lt;/p>
&lt;ul>
&lt;li>Set pairings for a whole sprint&lt;/li>
&lt;li>Set pairings for only the first ticket in a sprint, and then let people self-organise&lt;/li>
&lt;/ul>
&lt;h1 id="how-can-my-team-see-if-this-works-for-us">How can my team see if this works for us?&lt;/h1>
&lt;ol>
&lt;li>Check if your team is even interested in such an idea&lt;/li>
&lt;li>Make the up-front investment (skills matrix), and continued effort investment (changes to planning/ticket preparation)&lt;/li>
&lt;li>Run a trial for a few weeks. Maybe run a retro on the rotation process, and iterate if you see value there. Scrap it and move on if not.&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>For teams that have already bought into pairing and want to try a more focused approach to maximise their learning: &amp;ldquo;Rota Driven Development&amp;rdquo; could be an interesting experiment to try.&lt;/p></description></item><item><title>Symlinks, syncs, and app configuration</title><status>evergreen</status><link>https://idiosapps.github.io/garden/config-symlink-fast-setup/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://idiosapps.github.io/garden/config-symlink-fast-setup/</guid><description>&lt;p>When setting up a new Windows device, there are some tools that can help you to install your apps quickly and easily from the command line (WinGet, chocolatey). Whilst these are great (and can actually install most of your apps), one thing they can’t do is transfer your configuration between devices.&lt;/p>
&lt;p>In this short blog, we’ll be using:&lt;/p>
&lt;ul>
&lt;li>A cloud sync of choice (Google Drive / OneDrive / DropBox etc.)
&lt;ul>
&lt;li>So I have my configuration files on any device&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Symbolic links, in a tiny script file
&lt;ul>
&lt;li>So apps can easily access the backed-up configuration, and sync changes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An application we love, which uses simple configuration files&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>For this worked example, we&amp;rsquo;ll use Espanso, and a folder &amp;ldquo;Junction&amp;rdquo; symlink.&lt;/p>
&lt;p>The folder linking must be done before the source folder (Espanso&amp;rsquo;s config) is created. Either do this before installing the app, or do some file/folder shuffling.
It doesn&amp;rsquo;t matter if the target exists or not.&lt;/p>
&lt;p>In your cloud-sync&amp;rsquo;d folder (&lt;code>%HomePath%\OneDrive\Apps\espanso&lt;/code>), create a file &lt;code>symlink.bat&lt;/code> and add:&lt;/p>
&lt;pre tabindex="0">&lt;code>mklink /J %APPDATA%\espanso %HomePath%\OneDrive\Apps\espanso
&lt;/code>&lt;/pre>&lt;p>In Windows, the &lt;code>%APPDATA%&lt;/code> folder will look like this if the command succeed; note the little arrow on our symlinked folder:&lt;/p>
&lt;p>&lt;img src="symlink_folder_icon.png" alt="Untitled">&lt;/p>
&lt;p>In &lt;code>......./OneDrive/apps/espanso/match/base.yml&lt;/code>, add this to the main &lt;code>matches&lt;/code> body:&lt;/p>
&lt;pre tabindex="0">&lt;code>- trigger: &amp;#34;:synctest&amp;#34;
replace: &amp;#34;your espanso config was sync&amp;#39;d sucessfully!&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Install espanso with default settings&lt;/p>
&lt;p>Espanso startup logs show our symlink folder being loaded in. It does this anyway (nothing special is happening to the file loading&amp;hellip; other than it actually loading from our cloud sync&amp;rsquo;d folder!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">reading&lt;/span> &lt;span style="color:#111">configs&lt;/span> &lt;span style="color:#111">from&lt;/span>&lt;span style="color:#00a8c8">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#00a8c8">C:\\Users\\james\\AppData\\Roaming\\espanso&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">...&lt;/span> &lt;span style="color:#00a8c8">reading&lt;/span> &lt;span style="color:#00a8c8">packages&lt;/span> &lt;span style="color:#00a8c8">from:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#00a8c8">C:\\Users\\james\\AppData\\Roaming\\espanso\\match\\packages&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if we enter our special phrase, &lt;code>:synctest&lt;/code>, we should see it expanded to:&lt;/p>
&lt;p>&lt;code>your espanso config was sync’d sucessfully!&lt;/code>&lt;/p>
&lt;p>On another computer (or a fresh installation of Windows), all you have to do is double-click the .bat file.
In just a few minutes, we&amp;rsquo;ve made a system that will always take care of our favourite Espanso packages &amp;amp; personalised keywords.
Also note that any changes we make will be backed up to the cloud too!&lt;/p>
&lt;hr>
&lt;p>What we’ve done here can be applied to more applications which have simple configuration.
The scripts to create junctions/symbolic links could be per-app, or you could put them all in one script (to be run before a big WinGet/Brew install).&lt;/p>
&lt;p>Here’s a few configurations ones I may set up this synchronisation for:&lt;/p>
&lt;ul>
&lt;li>Headphone EQ - Peace/EqualizerAPO - .txt files represent frequencies/decibels etc.&lt;/li>
&lt;li>GPU Overclock/Undervolt - MSI Afterburner - Custom curve is a bit tricky to make (I have to search for my notes on instructions every time I set up)&lt;/li>
&lt;li>Calibre, for digital book management&lt;/li>
&lt;li>&amp;hellip; I can&amp;rsquo;t think of more, but I&amp;rsquo;m happy even with just Espanso having this :-)&lt;/li>
&lt;/ul>
&lt;p>The same principles apply to Ubuntu and MacOS - but implementation of your symlink script files might look more like &lt;a href="https://apple.stackexchange.com/a/115647">this StackExchange answer&lt;/a>.&lt;/p></description></item></channel></rss>